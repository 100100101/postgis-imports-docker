# docker run --name ubuntu_bash --rm -it osm2pgsql_ubuntu_osm2pgsql -c bash
# docker exec cool_pascal ls -la
# docker run --name ubuntu_bash --rm -it osm2pgsql_ubuntu_osm2pgsql bash
# docker run --name ubuntu_bash --rm -it osm2pgsql_ubuntu_osm2pgsql ls -la
docker run --name ubuntu_bash --rm -it osm2pgsql_ubuntu_osm2pgsql osm2pgsql -h

# Как я уже сказал, 6 часов — это моя догадка; из-за высоких требований к памяти я в последнее время не запускал osm2pgsql на файле планеты без --slim. Я думаю, если у вас 512 ГБ ОЗУ и 4-8 ядер, у вас должно быть все в порядке. Точные аргументы командной строки зависят от того, какой стиль карты вы будете использовать и т. д., но, скорее всего, это будет что-то вроде:

# osm2pgsql -d gis --hstore планета-последняя.osm.pbf

# некоторые стили предполагают, что вы будете использовать специальный файл стиля, файл преобразования LUA и, возможно, порекомендуют -Gвариант для построения правильных мультиполигонов, каждый из которых может немного замедлить работу. Если вам нужны преобразования LUA, сборка osm2gpsql с помощью «luajit» может восстановить часть времени, используемого для обработки LUA. Я не уверен на 100% в --cacheпараметре, раньше он не имел значения для нетонкого режима, но вам придется это увидеть. Сообщите о своих результатах!